############################################################################################################################
###############################--- Hubbard Model by Direct Diagonalization ---##############################################
############################################################################################################################


############################################################################################################################
####################################################--- Importing ---#######################################################
############################################################################################################################

using LinearAlgebra  #Pacote de Algebra linear
using Base.Threads      # numbers in binary representation
using LaTeXStrings  # For LaTex code
using SpecialFunctions  #Special Functions
using Integrals  #Integrals

############################################################################################################################
#############################################--- Setting the parameters ---################################################
############################################################################################################################

const U=2.0                        #Couloumb repultion
const μ=-U/2                        # Chemical Potential
const L=10                          #Chain size
      v_up=zeros(L)                    #Site energy for spin up
      v_down=zeros(L)                    #Site energy for spin down
const N=Int(L)                    #Number of electrons
const file_="1"                     # 1 write an article, 0 does not 
println("number of threads= ",Threads.nthreads())

#=
v_up[5]=10                                   #Impurity energy
v_down[5]=10
=#
############################################################################################################################
#################################################---- Functions ----########################################################
############################################################################################################################

#########################################---- Hamiltonian Construction ----#################################################

function mH(L,U,v_up,v_down,μ,N)

    m=zeros(4*L,4*L)

    for i in 0:1:L-1
        for p in 1:1:4
            
            for j in 0:1:L-1
                for q in 1:1:4

                    if (p==1)||(q==1)

                        m[4*i+p,4*j+q]+=0

                    elseif (p==2)&&(p==q)&&(i==j)

                        m[4*i+p,4*j+q]+=v_up[i+1]-μ

                    elseif (p==3)&&(p==q)&&(i==j)

                        m[4*i+p,4*j+q]+=v_down[i+1]-μ

                    elseif (p==4)&&(p==q)&&(i==j)

                        m[4*i+p,4*j+q]+=v_up[i+1]+v_down[i+1]+U-μ*2

                    end

                    if (i==j+1)&&(p==2)&&(q==2)

                        m[4*j+q,4*i+p]=m[4*i+p,4*j+q]+=-1.0
    
                    elseif (i==j+1)&&(p==3&&(q==3))
    
                        m[4*j+q,4*i+p]=m[4*i+p,4*j+q]+=-1.0
        
                    end

                end
 
            end

        end
    end

    
    m[4*(L-1)+2,2]=m[4*(L-1)+3,3]=m[2,4*(L-1)+2]=m[3,4*(L-1)+3]+=-1


    return m
end

#########################################---- Hamiltonian Construction ----##################################################

function n_l(State, Vec, l)

    ind_occu=[0,1,1,2]

    nl=0.0

    for m in 1:1:4
        
           nl+=(Vec[4*l+m,State])^2*ind_occu[m]

    end

    return nl
    
end

#########################################---- Main Calculation ----##################################################

function State_fund(N_levels,N)

    vec=zeros(N_levels)

    for i in 1:1:N

        vec[i]+=1

    end

    return vec
    
end

#########################################---- Main Calculation ----##################################################

function Main_calc(L,U,N,v_up,v_down,μ)


    H=mH(L,U,v_up,v_down,μ,N)
    Ener=eigvals(H)
    Vec=eigvecs(H)
    n=zeros(L)

    println(H)
 
    Ground=0

    for i in 1:N

        Ground+=Ener[i]

        for l in 0:1:L-1

            n[l+1]+=n_l(i,Vec,l)

         end
    end

    println("Ground State Energy: ", Ground/L)

    return n
    
end

############################################################################################################################
#################################################---- Really Calculation ----###############################################
############################################################################################################################

@time N_l=Main_calc(L,U,N,v_up,v_down,μ)